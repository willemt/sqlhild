@@left_recursion :: True
@@ignorecase :: True
@@comments :: /(\/\*.*?\*\/;?|--.*$)/

#~

select_query = with:[with] select:[select] from:from join:[join] where:[where] groupby:[groupby] orderby:[orderby] [";"];

with = 'WITH' {with_query}+;

with_query = identifier 'AS' '{' select_query '}';

query = 
    select:select_query [";"] |
    select:(select_query {'UNION' select_query}+ ) [";"] |
    insert:insert ";" | 
    drop_table:drop_table ";" |
    lock_tables:lock_tables ";" |
    unlock_tables:unlock_tables ";" |
    create_table:create_table ";";

# queries = {comment}* @:{query}+ {comment}*;
queries = {query}+;

# ############################################################################
# COMMENTS
# ############################################################################

comment_text = {/./}*;

comment = 
    "/*" comment_text "*/" [";"] |
    "--" comment_text;

# ############################################################################
# LOCK TABLES
# ############################################################################
lock_tables = "LOCK TABLES" table "WRITE";

unlock_tables = "UNLOCK TABLES";

# ############################################################################
# INSERT
# ############################################################################

insert_tuple = '(' @:arg {',' @+:arg}* ')';
insert = 'INSERT INTO' table:table 'VALUES' tuples+:arglist {',' tuples+:arglist}*;

# ############################################################################
# SET
# ############################################################################
# SET variable { TO | = } { value | 'value' | DEFAULT }
# SET TIME ZONE { 'timezone' | LOCAL | DEFAULT }

# ############################################################################
# CREATE TABLE
# ############################################################################
column_nullity = "NOT NULL" | "NULL";

column_flags = 
    not_null:[column_nullity]
    default:["DEFAULT" arg]
    auto_increment:["AUTO_INCREMENT"]
    unique:["UNIQUE" ["KEY"]]
    primary:["PRIMARY" ["KEY"]]
    comment:["COMMENT" string]
    column_format:["COMMENT_FORMAT" ("FIXED" | "DYNAMIC" | "DEFAULT")]
    storage:["STORAGE" ("DISK" | "MEMORY" | "DEFAULT")]
    ;
    # TODO: [reference_definition]

table_column = name:identifier type:type flags:column_flags;

primary_key = "PRIMARY KEY" identifier_list;

key = "KEY" identifier identifier_list;

constraint = "CONSTRAINT" identifier "FOREIGN KEY" "(" identifier ")" "REFERENCES" identifier "(" identifier ")" "ON DELETE CASCADE ON UPDATE CASCADE";

table_extra = primary_key | key | constraint;

type = name:primary_type [length:type_length];

primary_type =
    "int" |
    "char" |
    "varchar" |
    "float";

type_length = "(" @:number ")";

create_table =
   'create table' table:table '(' columns+:table_column {"," columns+:table_column}* {',' table_extra}* ')' "ENGINE=InnoDB DEFAULT CHARSET=utf8";

drop_table =
    'drop table if exists' table:table;

# ############################################################################
# FUNCTIONS
# ############################################################################

function_arg = identifier | arg;

function_args = @+:function_arg {',' @+:function_arg}*;

function = name:/["A-Za-z._]+/ "(" args:[function_args] ")";

# ############################################################################
# SELECT
# ############################################################################

identifier_list = '(' @+:identifier {',' @+:identifier}* ')' ;
arglist = '(' @+:arg {',' @+:arg}* ')' ;

number = 
    /-?[0-9]+/ |
    /'-?[0-9]+'/
    ;

float = 
    /-?[0-9]+\.[0-9]+/ |
    /'-?[0-9]+\.[0-9]+'/
    ;

identifier = 
    quoted_identifier |
    ?/["A-Za-z._]+/?; 

table = table_name:identifier [['AS'] table_alias:alias];

quoted_identifier =
    ?/"[a-z0-9._ ]+"\.[a-z_]+/? |
    ?/"[a-z0-9._ ]+"/? |
    "`" @:?/[a-z0-9._ ]+/? "`"
    ;

# TODO: add other keywords
keyword = 'WHERE' | 'GROUP';

alias = !keyword identifier;

string =
    '"' @:/(?:\\.|[^"\\])*/ '"'|
    "'" @:/(?:\\.|[^'\\])*/ "'";

arg =
    float |
    number |
    string |
    boolean |
    "NULL" |
    "*"
    ;

boolean = 'false' | 'true';

op = '<' | '>' | '=' | '<=' | '>=' | '!=' | 'like' | 'in';

expr_item =
    arg|
    function|
    identifier;

expr = args+:expr_item name:op ~ args+:expr_item;

subquery =
    exists_subquery |
    not_exists_subquery;

exists_subquery = name:'EXISTS' ~ '(' args+:select_query ')';
not_exists_subquery = name:'NOT EXISTS' ~ '(' args+:select_query ')';

expression =
    expression:subquery|
    expression:expr;

select = 'SELECT' distinct:[distinct] columns:select_contents;
select_contents =
    '*' |
    @+:expr_item {',' @+:expr_item}* ;

distinct = 'DISTINCT';

from = 'FROM' @+:table {',' @+:table}*;

join = {@+:table_join}*;
table_join = type:join_type table:table 'ON' on:test;
join_type =
    'JOIN' |
    'CROSS JOIN' |
    'INNER JOIN' |
    'NATURAL JOIN' |
    'LEFT OUTER JOIN' |
    'RIGHT OUTER JOIN' |
    'FULL OUTER JOIN';

bool = 'AND' | 'OR';

test =
    grouped_test |
    or_test |
    and_test |
    not_test |
    expression;

or_test = test 'OR' test;
and_test = test 'AND' test;
not_test = 'NOT' test;

# grouped_test = '(' test ')';
grouped_test = '(' (grouped_test | or_test | and_test | not_test) ')';

where = 'WHERE' @:test;

groupby = 'GROUP BY' @:groupby_clause ['HAVING' @+:expression];
groupby_clause = @+:identifier {',' @+:identifier}* ;

orderby = 'ORDER BY' @:orderby_clause;
orderby_clause = @+:expression {',' @+:expression}* ;
